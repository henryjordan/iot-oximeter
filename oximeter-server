#include "oc_api.h"
#include "eHealth.h" //inclui biblioteca do eHealth

static bool state = false;
int bpm, o2;
int cont = 0;
oc_string_t name;

void readPulsioximeter(); //lê um valor do oxímetro

void setup() { 

	eHealth.initPulsioximeter(); //configura os pinos do shield para o oximetro
	//Attach the inttruptions for using the pulsioximeter.
	attachInterrupt(6, readPulsioximeter, RISING);
    
} //inicia o oxímetro anexando as interrupções dos pinos do shield

static int
app_init(void)
{
  int ret = oc_init_platform("Intel", NULL, NULL);
  ret |=
    oc_add_device("/oic/d", "oic.d.oximeter", "Oximeter", "1.0", "1.0", NULL, NULL);
  oc_new_string(&name, "Oxímetro", 12);
  return ret;
}

void readPulsioximeter(){  

  cont ++;
  if (cont == 50) { //Get only of one 50 measures to reduce the latency
    eHealth.readPulsioximeter();  
    cont = 0;
  }
} // realiza a leitura a cada 50 medições dos dados do oxímetro

static void
get_oximeter(oc_request_t *request, oc_interface_mask_t interface, void *user_data)
{
  (void)user_data;
  bpm = eHealth.getBPM();
  o2 = eHealth.getOxygenSaturation();

  PRINT("PRbpm : %d",eHealth.getBPM());
  PRINT("    %%SPo2 : %d\n", eHealth.getOxygenSaturation());
  digitalWrite(2,HIGH);
  oc_rep_start_root_object();
  switch (interface) {
  case OC_IF_BASELINE:
    oc_process_baseline_interface(request->resource);
  case OC_IF_RW:
    oc_rep_set_int(root, bpm, bpm);
    oc_rep_set_int(root, o2, o2);
    break;
  default:
    break;
  }
  oc_rep_end_root_object();
  oc_send_response(request, OC_STATUS_OK);
}

static void
register_resources(void)
{
  oc_resource_t *res = oc_new_resource("/a/oximeter", 2, 0);
  oc_resource_bind_resource_type(res, "core.oximeter");
  oc_resource_bind_resource_type(res, "core.oxygen");
  oc_resource_bind_resource_type(res, "core.BPM");
  oc_resource_bind_resource_interface(res, OC_IF_RW);
  oc_resource_set_default_interface(res, OC_IF_RW);
  oc_resource_set_discoverable(res, true);
  oc_resource_set_periodic_observable(res, 1);
  oc_resource_set_request_handler(res, OC_GET, get_oximeter, NULL);
  oc_add_resource(res);
}

#if defined(CONFIG_MICROKERNEL) || defined(CONFIG_NANOKERNEL) /* Zephyr */

#include <sections.h>
#include <string.h>
#include <zephyr.h>

static struct nano_sem block;

static void
signal_event_loop(void)
{
  nano_sem_give(&block);
}

void
main(void)
{
  static const oc_handler_t handler = {.init = app_init,
                                       .signal_event_loop = signal_event_loop,
                                       .register_resources =
                                         register_resources };

  nano_sem_init(&block);

  if (oc_main_init(&handler) < 0)
    return;

  oc_clock_time_t next_event;

  while (true) {
    next_event = oc_main_poll();
    if (next_event == 0)
      next_event = TICKS_UNLIMITED;
    else
      next_event -= oc_clock_time();
    nano_task_sem_take(&block, next_event);
  }

  oc_main_shutdown();
}

#elif defined(__linux__) /* Linux */
#include "port/oc_clock.h"
#include <pthread.h>
#include <signal.h>
#include <stdio.h>

pthread_mutex_t mutex;
pthread_cond_t cv;
struct timespec ts;

int quit = 0;

static void
signal_event_loop(void)
{
  pthread_mutex_lock(&mutex);
  pthread_cond_signal(&cv);
  pthread_mutex_unlock(&mutex);
}

void
handle_signal(int signal)
{
  (void)signal;
  signal_event_loop();
  quit = 1;
}

int
main(void)
{
  setup();
  int init;
  struct sigaction sa;
  sigfillset(&sa.sa_mask);
  sa.sa_flags = 0;
  sa.sa_handler = handle_signal;
  sigaction(SIGINT, &sa, NULL);

  static const oc_handler_t handler = {.init = app_init,
                                       .signal_event_loop = signal_event_loop,
                                       .register_resources =
                                         register_resources };

  oc_clock_time_t next_event;

#ifdef OC_SECURITY
  oc_storage_config("./creds");
#endif /* OC_SECURITY */

  init = oc_main_init(&handler);
  if (init < 0)
    return init;

  while (quit != 1) {
    next_event = oc_main_poll();
    pthread_mutex_lock(&mutex);
    if (next_event == 0) {
      pthread_cond_wait(&cv, &mutex);
    } else {
      ts.tv_sec = (next_event / OC_CLOCK_SECOND);
      ts.tv_nsec = (next_event % OC_CLOCK_SECOND) * 1.e09 / OC_CLOCK_SECOND;
      pthread_cond_timedwait(&cv, &mutex, &ts);
    }
    pthread_mutex_unlock(&mutex);
  }

  oc_main_shutdown();
  return 0;
}
#endif /* __linux__ */
